package main

import (
	"fmt"
	"math/big"
	"runtime"
)

// totalBits is 2^32 bits
const totalBits = 1 << 32

// we pack 64 bits per uint64 word
const wordBits = 64

// wordsNeeded = totalBits/wordBits = 1<<(32-6) = 1<<26
const wordsNeeded = totalBits / wordBits

func main() {
	// Create an empty big.Int (all bits = 0)
	bits := big.NewInt(wordsNeeded)

	for i := 0; i < totalBits; i++ {
		bits.SetBit(bits, i, 1)
	}
	// Set bit at index 3 to 1

	// Check bit at index 3
	if bits.Bit(3) == 1 {
		fmt.Println("Bit 3 is ON")
	}

	// Clear bit 3 (set it back to 0)
	bits.SetBit(bits, 3, 0)
	fmt.Println("Bit 3 now:", bits.Bit(3)) // prints 0

	PrintMemUsage()

}

func PrintMemUsage() {
	var m runtime.MemStats
	runtime.ReadMemStats(&m)
	fmt.Printf("Alloc = %v MiB", m.Alloc/1024/1024)
	fmt.Printf("\tTotalAlloc = %v MiB", m.TotalAlloc/1024/1024)
	fmt.Printf("\tSys = %v MiB", m.Sys/1024/1024)
	fmt.Printf("\tNumGC = %v\n", m.NumGC)
}
